{"data":{"site":{"siteMetadata":{"title":"Personal Blog","author":"Yusuf Unlu"}},"markdownRemark":{"id":"1bc54ba8-0a3f-5e40-aa6c-bab53f776ed8","html":"<p>多くの人は、私が実際に持っている知識量より遥かに多くのことを知っていると思い込んでいる。それは悪い事ではないので文句を言っているわけではない。(世の少数派の人達は、努力して資格を得ているにもかかわらず、逆の偏見に苦しめられている。それは<em>イケてない</em>。)</p>\n<p><strong>この記事では、私がよく知っていると思われているが実は知らない技術について列挙する。</strong> これは、<em>あなたが</em>これらの技術を習う必要がないと言っているわけではなく、私が<em>他の</em>膨大な知識を持っていると言っているわけでもない。しかし、私は脆弱な立場にいるわけではないので、正直に言うことができる。</p>\n<p>なぜこれが大事と思うかというと、</p>\n<hr>\n<p>まず最初に、良い技術者は全ての技術について知っていないといけないと思われている節がある。非現実的だ。数十個のライブラリが列挙されている「技術を取得する為のロードマップ」を見たことがあるか？便利な記事ではあるが、おじけづいてしまうよな。</p>\n<p>さらに、どんなに経験を経ても、自分に自信がある時があれば、自信が持てなかったり(インポスター症候群)、自信過剰になってしまったり（ダニング＝クルーガー効果)を行ったり来たりしてしまうものだ。これらは環境、仕事、人柄、同僚、精神状態、時間等、様々な要因に左右されてしまう。</p>\n<p>経験のある技術者はそういった自身の不安をおおっぴらにすることで、初心者を勇気づけたりする。しかし、熟達しても不安を感じる外科医とメスを初めて触る人には天と地との差がある。</p>\n<p>明らかに知識の差がある状態で「我々はみんな初心者だよ」と聞くのは時に空っぽに聞こえたりしてしまう。私が善意をもって励まそうとしても逆効果になったりするものだ。</p>\n<p>それでもなお、経験者でさえ知識の差は多く存在する。この記事は私が持っている知識についてだ。そして、似たような立場にいる他の人もぜひ公開してみてほしい。しかし、自身の経験を軽んじるのはやめよう。</p>\n<p><strong>我々は知識の差を公表することができる。偽物と感じたり感じなかったりするかもしれない。それでも数年かけて得た知識や経験を活かすことができる。</strong></p>\n<hr>\n<p>前置きが終わったところで、これらが今、私が知らないことだ。</p>\n<ul>\n<li>\n<p><strong>Unix コマンドと Bash</strong> <code class=\"language-text\">ls</code> と <code class=\"language-text\">cd</code> は知ってる。 でも他のコマンドは毎回調べる。Pipe がどういうものかはわかるが、簡単なケースにしか使ったことない。 <code class=\"language-text\">xargs</code> を使った複雑な連携のしかたは知らないし、それを使ってoutput streamを分ける方法もわからない。 Bashもまともに習ったことはないから単純（かつバグがある）シェルスクリプトしか書けない。</p>\n</li>\n<li>\n<p><strong>低レベル言語</strong> アセンブリによってメモリにいろいろ保存したり別の行にジャンプしたりできるのは知ってる。そのくらいだ。C言語は少し触ったからポインタがなにかは知っているが、 <code class=\"language-text\">malloc</code> の使い方はわからない。 Rustは触ったことがない。</p>\n</li>\n<li>\n<p><strong>ネットワーク知識</strong> パソコンにIPアドレスが配られることや、DNSによってホスト名を解決してることはしってる。TCP/IPの様な低レベルプロトコルによって（たぶん）整合性の取れたパケット交換が行えることはしってる。それだけ - 詳細については曖昧だ。</p>\n</li>\n<li>\n<p><strong>コンテナ</strong> Docker も Kubernetes も全くわからない。(この2つって関係してる?) なんとなく、別のVMを立ち上げて決められた様に起動してるものだと思っている。響きは良いが使ったことはない。</p>\n</li>\n<li>\n<p><strong>サーバレス</strong> これも響きがクールだ。使ったことはない。サーバレスによってバックエンド開発がどう変わっていくかも良くわからない（変わっていくのだとしたら）。</p>\n</li>\n<li>\n<p><strong>マイクロサービス</strong> 私の理解が正しいのなら、これは「複数のAPIエンドポイントが連携しあっている」ということ。それがどういった利点や欠点を持つのかまでは使ったことがないので知らない。</p>\n</li>\n<li>\n<p><strong>Python</strong> これについては申し訳なく感じる — 数年間 Python を使っていた時期は<em>ある</em>がまともに習ったことはない。importの動作など、知らないことはたくさんある。</p>\n</li>\n<li>\n<p><strong>Node を使ったバックエンド開発</strong> Node の起動方法はしってる。ビルドツールの作成に<code class=\"language-text\">fs</code>を使ったことはある。Expressの設定もできる。しかし、NodeからDBを触ったことはないし、バックエンド開発をしたこともない。Next の様な React をつかったフレームワークも “Hello world” 以上のことは知らない。</p>\n</li>\n<li>\n<p><strong>ネイティブ開発</strong> 一時期 Objective C を習おうとしたことはあるが、うまく行かなかった。 Swift も触ったことない。Java も同じだ。(C# の経験はあるのでこっちはやろうと思えばできそう)</p>\n</li>\n<li>\n<p><strong>アルゴリズム</strong> 調子がいい日ならバブルソート、もしかしたらクイックソートも書けるかもしれない。何か現実的な問題に繋がっていたらグラフ遷移もできるだろう。O(n) 記法についてはわかるが、私の理解は「ループの中でループするな」くらいだ。</p>\n</li>\n<li>\n<p><strong>関数型言語</strong> JavaScript をカウントして良いならそれなら書ける。 従来の関数型言語はどれも知らない。 (私が書ける言語は C# と JavaScript くらい。 C# もほとんど忘れた。) LISPライクな言語 (Clojureとか)、 Haskellライクな言語 (Elmとか), MLライクな言語 (OCamlとか) で書かれたコードはどれも読むのが難しい.</p>\n</li>\n<li>\n<p><strong>関数型の用語</strong> Map と reduce くらいしかしらない。 monoids も functors もしらない。 monad が何かは知っているつもりだが幻想かもしれない。</p>\n</li>\n<li>\n<p><strong>モダンCSS</strong> Flexbox も Grid も知らない。 Float最高。</p>\n</li>\n<li>\n<p><strong>CSS設計</strong> BEMメソッドは使ったことがある (CSSの部分だけ。元のBEMではない)。それくらいしかしらない。OOCSS や他の設計メソッドは使ったことがない。</p>\n</li>\n<li>\n<p><strong>SCSS / Sass.</strong> 習う機会がなかった。</p>\n</li>\n<li>\n<p><strong>CORS</strong> CORSのエラーは大の苦手だ! ヘッダーを設けて直すことは知ってるが、これの対応に何時間も時間を無駄にした。</p>\n</li>\n<li>\n<p><strong>HTTPS / SSL.</strong> セットアップしたことがない。秘密鍵と公開鍵が存在する以上の仕組みは知らない。</p>\n</li>\n<li>\n<p><strong>GraphQL.</strong> Query の読み方は知ってるが node や edge を使って何かを表す方法は知らないし、 fragment をいつ使えばいいかも知らない。paginationがどういった仕組みなのかもわからない。</p>\n</li>\n<li>\n<p><strong>Sockets</strong> 私の中では Socket は request/response モデルの外で連携を行っているもの、ということくらいしか知らない。</p>\n</li>\n<li>\n<p><strong>Streams</strong> Rx Observables 以外では streams を深く活用したことがない。昔の Node streams を1,2回触ったことはあるが、毎回エラーハンドリングが狂う。</p>\n</li>\n<li>\n<p><strong>Electron</strong> 使ったことない。</p>\n</li>\n<li>\n<p><strong>TypeScript</strong> 型の概念は理解しているし、読み方もわかるが、実際に書いたことはない。何回か試したが、その度壁にぶち当たった。</p>\n</li>\n<li>\n<p><strong>デプロイ と devops.</strong> FTP を通してファイルを送ったり、プロセスを kill することはできるが、私の devops スキルはそのくらいだ。</p>\n</li>\n<li>\n<p><strong>グラフィクス</strong> canvas も SVG も WebGL も low-level graphics も、どれも効率的に使ったことはない。概念はわかるが基礎から知らないといけない。</p>\n</li>\n</ul>\n<p>もちろん、これで全部ではない。私が知らないことはまだまだたくさんある。</p>\n<hr>\n<p>変な議題だったかもしれない。書くことに違和感すら感じた。無知を自慢しているのか？ 私が読者にこの記事から受け取ってほしいことはこれだ。</p>\n<ul>\n<li>\n<p><strong>あなたが尊敬している技術者でも知らないことはたくさんある。あなたが知っていることでも。</strong></p>\n</li>\n<li>\n<p><strong>どれだけ知識がある人でも自信の幅は揺れ動く</strong></p>\n</li>\n<li>\n<p><strong>技術者は知識の差があってもその人の価値がある</strong></p>\n</li>\n</ul>\n<p>私は私が知らないことを知っている（少なくとも、一部はね）。プロジェクトで必要になったり、個人的に気になったりしたら取得することはできる。</p>\n<p>これは私の知識や経験の価値を下げたりしない。私は他にいろんなことができる。例えば、必要なときに新しい技術を習えるとか。</p>\n<blockquote>\n<p>追記: 私が知っていることの一部も<a href=\"/Personal-Blog/the-elements-of-ui-engineering/\">記事にした</a>。</p>\n</blockquote>","timeToRead":2,"frontmatter":{"title":"2018年の段階で私が知らないこと","date":"December 28, 2018","spoiler":"我々は自身の価値を下げずに、持っていない知識について言うことができる。"},"fields":{"slug":"/ja/things-i-dont-know-as-of-2018/","langKey":"ja"}}},"pageContext":{"slug":"/ja/things-i-dont-know-as-of-2018/","translations":["zh-hans","ru","es","zh-hant","fr","ja","ko","pt-br","sv","te"],"translatedLinks":["/the-elements-of-ui-engineering/"]}}
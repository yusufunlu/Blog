{"data":{"site":{"siteMetadata":{"title":"yusufunlu","author":"Yusuf Unlu"}},"markdownRemark":{"id":"4a08729b-dd76-53d4-973b-8695e13580d5","html":"<h2 id=\"sam-cli-vs-intellij-aws-toolkit\"><a href=\"#sam-cli-vs-intellij-aws-toolkit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SAM CLI vs Intellij AWS Toolkit</h2>\n<p>Birkaç fark arada\nSAM-CLI , Gatewayresponse tipinde return ediyor, IDE ise pom.xml dosyasına aws-lambda-java-events da ekledi.\nBunun dışında kodun mantığı aynı. event.json dosyası tamamen aynı. template.yml dosyasında da sadece CLI proje ismini tamamen doğru yazmış.</p>\n<h2 id=\"aws-toolkit\"><a href=\"#aws-toolkit\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Toolkit</h2>\n<p>IDE’den lambda class üstünde çıkan işarete tıklayıp crate lambda deyip ayarları yapınca şu komut ile derleme yaptı\n“C:\\Program Files\\Amazon\\AWSSAMCLI\\bin\\sam.cmd” build Function —template C:\\Users\\yusufu\\Projects\\BACKEND\\AWS-Lambda-Example-IDE\\HelloWorldFunction.aws-sam\\build\\template.yaml —build-dir C:\\Users\\yusufu\\Projects\\BACKEND\\AWS-Lambda-Example-IDE\\HelloWorldFunction.aws-sam\\build</p>\n<p>SAM build Function —template .aws-sam\\build\\template.yaml —build-dir .aws-sam\\build\naws-sam klasörü helloworld klasörü altında oluşmuş.</p>\n<p>Yukarıda oluşuna template.yaml içindeki configler yanlış ama bu sırada deployu yapmış bile ve doğru timeout ve ram ile.\nS3 bucket’ına da helloworldfunctionbyide.zip ismi ile .aws-sam altındaki helloworld ve lib klasörlerini atmış.</p>\n<h2 id=\"sam-cli\"><a href=\"#sam-cli\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SAM CLI</h2>\n<p>SAMCLI ile sam build yapınca tek fark .aws-sam folder’ını bir üst dizine yerleştirdi\nAslında Aws toolkit SAM komutlarını kullanıyor her işlemdde bu sebeple Aws toolkit için SAM CLI da kurulu olması lazım bilgisayarda</p>\n<h2 id=\"aws-cli\"><a href=\"#aws-cli\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS CLI</h2>\n<p>aws lambda update-function-code —function-name my-lambda-name —zip-file fileb://./target/my-lambda-jar.1.0-SNAPSHOT.jar</p>\n<h2 id=\"aws-codebuild-vs-jenkins\"><a href=\"#aws-codebuild-vs-jenkins\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Codebuild vs Jenkins</h2>\n<p>CodePipeline is a continuous “deployment” tool, while Jenkins is more of a continuous “integration” tool.\nJenkinsde amaç build alıp testleri çalıştırmak ve koddaki her bir commit ile jobları trigger etmek\nAWS Codepipeline managed yani sağlığını bizim takip etmemize gerek yok</p>\n<p>Jenkins arayüzü kötü\nJenkins hostingini kendimiz yapmalıyız\nJenkins plugin versionlarına çok bağımlı ve pluginler çok hızlı update olmuyor\nBeraber de kullanılabilirler : AWS code build için mesela Jenkins kullanabilir\nYapılan deployu kademeli olarak mesela her gün %10 daha fazla kullanıcıya aç gibi bir özellik yok Jenkinsde\nAma AWS Codedeploy’da var</p>\n<p>teams pricing nasıl\nonlarca event var aynı anda 40 sandalye 1to1 meetıng olabılır\n1 account ıle kac paralel sessıon ızın verıyor prıcıng nasıl nerede ucretlı\n1 sessıon nasıl baslatılabılır lınk ıle acma team acılınc a tekrar ad soyad almasın</p>","timeToRead":2,"frontmatter":{"title":"AWS ile CI/CD süreçleri","date":"August 27, 2020","spoiler":"AWS Codecommit, Codepipeline, Codebuild, Cloudformation, CodeDeploy, SAM CLI, AWS CLI, AWS Toolkit"},"fields":{"slug":"/AWS Deploy/","langKey":"en"}}},"pageContext":{"slug":"/AWS Deploy/","previous":{"fields":{"slug":"/Spring Circuit Breaker/","langKey":"en","directoryName":"Spring Circuit Breaker","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Spring Circuit Breaker"}},"next":{"fields":{"slug":"/Jhipster/","langKey":"en","directoryName":"Jhipster","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Jhipster ile Spring best practice şablon proje"}},"translations":[],"translatedLinks":[]}}